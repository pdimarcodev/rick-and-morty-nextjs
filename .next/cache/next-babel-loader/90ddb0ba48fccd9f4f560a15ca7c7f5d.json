{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/pablo/rick-and-morty-nextjs/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pablo/rick-and-morty-nextjs/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query allCharacters {\\n        characters {\\n            results {\\n                id\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery ($page: Int){\\n  characters(page: $page){\\n    info{\\n      pages\\n      next\\n      prev\\n    }\\n    results{\\n      id\\n      name\\n      image\\n      type\\n      gender\\n      species\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nvar CharsQueryDocument = gql(_templateObject());\nvar ALL_CHARACTERS = gql(_templateObject2());\nexport default function Home() {\n  _s();\n\n  var _useQuery = useQuery(ALL_CHARACTERS),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \":( an error happened\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Rick and Morty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"icon\",\n        href: \"/favicon.ico\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), console.log(data === null || data === void 0 ? void 0 : data.characters), \"))\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n} // export const getStaticProps = async () => {\n//    const apolloClient = client;\n//    await apolloClient.query<CharactersQuery>({\n//      query: CharsQueryDocument,\n//    });\n//    return { \n//      props: {\n//        initialApolloState: apolloClient.cache.extract(),\n//      },\n//    };\n// };\n// const CharsQueryDocument = gql`\n//   query Characters {\n//     characters {\n//       results {\n//         id\n//         name\n//       }\n//     }\n//   }\n// `;\n\n_s(Home, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/pablo/rick-and-morty-nextjs/pages/index.tsx"],"names":["gql","useQuery","Head","styles","CharsQueryDocument","ALL_CHARACTERS","Home","data","loading","error","container","console","log","characters"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAEA,IAAMC,kBAAkB,GAAGJ,GAAH,mBAAxB;AAoBA,IAAMK,cAAc,GAAGL,GAAH,oBAApB;AAkDA,eAAe,SAASM,IAAT,GAAgB;AAAA;;AAAA,kBACIL,QAAQ,CAAkBI,cAAlB,CADZ;AAAA,MACrBE,IADqB,aACrBA,IADqB;AAAA,MACfC,OADe,aACfA,OADe;AAAA,MACNC,KADM,aACNA,KADM;;AAI7B,MAAID,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACO,SAAvB;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,GAAG,EAAC,MAAV;AAAiB,QAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAMCC,OAAO,CAACC,GAAR,CAAYL,IAAZ,aAAYA,IAAZ,uBAAYA,IAAI,CAAEM,UAAlB,CAND;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,C,CAED;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GArDwBP,I;UACWL,Q;;;KADXK,I","sourcesContent":["import { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport Head from 'next/head'\nimport styles from '../styles/Home.module.css'\n\nconst CharsQueryDocument = gql`\nquery ($page: Int){\n  characters(page: $page){\n    info{\n      pages\n      next\n      prev\n    }\n    results{\n      id\n      name\n      image\n      type\n      gender\n      species\n    }\n  }\n}\n`;\n\nconst ALL_CHARACTERS = gql`\n    query allCharacters {\n        characters {\n            results {\n                id\n                name\n            }\n        }\n    }\n`;\n\n\ninterface Character {\n    id: string;\n    name: string;\n    image: string;\n    type: string;\n    gender: string;\n    species: string;\n    \n}\n\ninterface CharactersQuery {     \n       characters: Character[];\n}\n\n// interface Data {\n//   allPeople: {\n//     people: Array<{ id: string; name: string }>;\n//   };\n// };\n\n\n// interface CharactersQuery {\n  \n//     info: Pages;\n//     results: Character[];\n  \n// };\n\ninterface Pages {\n  pages: number;\n  next: number;\n  prev: number;\n}\n\ninterface CharsVars {\n  page: Pages\n}\n\nexport default function Home() {\n  const { data, loading, error } = useQuery<CharactersQuery>(ALL_CHARACTERS);\n  \n  \n  if (loading) {\n    return <p>loading...</p>;\n  }\n\n  if (error) {\n    return <p>:( an error happened</p>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Rick and Morty</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n    {console.log(data?.characters)\n\n    }))\n    \n      \n  \n    </div>\n  )\n}\n\n// export const getStaticProps = async () => {\n//    const apolloClient = client;\n\n//    await apolloClient.query<CharactersQuery>({\n//      query: CharsQueryDocument,\n//    });\n\n//    return { \n//      props: {\n//        initialApolloState: apolloClient.cache.extract(),\n//      },\n//    };\n// };\n\n\n// const CharsQueryDocument = gql`\n//   query Characters {\n//     characters {\n//       results {\n//         id\n//         name\n//       }\n//     }\n//   }\n// `;"]},"metadata":{},"sourceType":"module"}