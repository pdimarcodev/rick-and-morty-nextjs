{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pablo/rick-and-morty-nextjs/pages/index.tsx\";\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nconst CharsQueryDocument = gql`\n  query Characters {\n    characters {\n      results {\n        id\n        name\n      }\n    }\n  }\n`;\nexport default function Home() {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(CharsQueryDocument);\n  const characters = data === null || data === void 0 ? void 0 : data.characters;\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \":( an error happened\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Rick and Morty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"icon\",\n        href: \"/favicon.ico\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), characters && characters.length > 0 && characters.map(character => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: character.name\n      }, character.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }, this);\n    }), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n} // export const getStaticProps = async () => {\n//    const apolloClient = client;\n//    await apolloClient.query<CharactersQuery>({\n//      query: CharsQueryDocument,\n//    });\n//    return { \n//      props: {\n//        initialApolloState: apolloClient.cache.extract(),\n//      },\n//    };\n// };","map":{"version":3,"sources":["/Users/pablo/rick-and-morty-nextjs/pages/index.tsx"],"names":["gql","useQuery","Head","styles","CharsQueryDocument","Home","data","loading","error","characters","container","length","map","character","name","id"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAIA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAIA,MAAMC,kBAAkB,GAAGJ,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAeA,eAAe,SAASK,IAAT,GAAgB;AAC7B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BP,QAAQ,CAAkBG,kBAAlB,CAAzC;AACA,QAAMK,UAAU,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,UAAzB;;AAEA,MAAIF,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEL,MAAM,CAACO,SAAvB;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,GAAG,EAAC,MAAV;AAAiB,QAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAKGD,UAAU,IAAIA,UAAU,CAACE,MAAX,GAAoB,CAAlC,IAAuCF,UAAU,CAACG,GAAX,CAAgBC,SAAD,IAAe;AACpE,0BAAO;AAAA,kBAAyBA,SAAS,CAACC;AAAnC,SAAUD,SAAS,CAACE,EAApB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFuC,CAL1C;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,C,CAED;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { client } from '../apollo/client'\n\nimport Head from 'next/head'\nimport styles from '../styles/Home.module.css'\n\n\n\nconst CharsQueryDocument = gql`\n  query Characters {\n    characters {\n      results {\n        id\n        name\n      }\n    }\n  }\n`;\n\ninterface CharactersQuery {\n  characters: {id: number; name: string}[];\n}\n\nexport default function Home() {\n  const { data, loading, error } = useQuery<CharactersQuery>(CharsQueryDocument);\n  const characters = data?.characters;\n\n  if (loading) {\n    return <p>loading...</p>;\n  }\n\n  if (error) {\n    return <p>:( an error happened</p>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Rick and Morty</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      {characters && characters.length > 0 && characters.map((character) => {\n        return <div key={character.id}>{character.name}</div>;\n      })};\n      \n    \n    </div>\n  )\n}\n\n// export const getStaticProps = async () => {\n//    const apolloClient = client;\n\n//    await apolloClient.query<CharactersQuery>({\n//      query: CharsQueryDocument,\n//    });\n\n//    return { \n//      props: {\n//        initialApolloState: apolloClient.cache.extract(),\n//      },\n//    };\n// };"]},"metadata":{},"sourceType":"module"}